# -*- coding: utf-8 -*-
"""Finance_Data_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19aQ9szE42SK722VWJPm8OI2FLW656ZXf

Importing Liabraries:
"""

# Commented out IPython magic to ensure Python compatibility.
from pandas_datareader import data, wb
import pandas as pd
import numpy as np
import datetime
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
# %matplotlib inline

import cufflinks as cf
cf.go_offline()

import plotly
plotly.io.renderers.default = 'colab'
import plotly.graph_objects as go

"""Setting DateRange:"""

start = datetime.datetime(2012, 1, 1)
end = datetime.datetime(2022, 12, 31)

"""Importing Data of: 
*   Bank of America
*   CitiGroup
*   Goldman Sachs
*   JPMorgan Chase
*   Morgan Stanley
*   Wells Fargo








"""

BAC = yf.download("BAC", start="2012-01-01", end="2022-12-31", interval="1d")
BAC.head()

C = yf.download("C", start="2012-01-01", end="2022-12-31", interval="1d")
C.head()
GS = yf.download("GS", start="2012-01-01", end="2022-12-31", interval="1d")
GS.head()
JPM = yf.download("JPM", start="2012-01-01", end="2022-12-31", interval="1d")
JPM.head()
MS = yf.download("MS", start="2012-01-01", end="2022-12-31", interval="1d")
MS.head()
WFC = yf.download("WFC", start="2012-01-01", end="2022-12-31", interval="1d")
WFC.head()

"""Creating a list of the ticker symbols: tickers"""

tickers=["BAC","C","GS","JPM","MS","WFC"]

"""Concatenated the bank dataframes together to a single data frame: bank_stocks"""

bank_stocks = pd.concat([BAC,C, GS, JPM, MS, WFC],axis=1,keys=tickers)

bank_stocks

"""Setting the column name levels:"""

bank_stocks.columns.names = ['Bank Ticker','Stock Info']

"""Checking the head of the bank_stocks dataframe:"""

bank_stocks.head()

"""Checking the max Close price for each bank's stock throughout the time period:"""

bank_stocks.xs(key='Close',axis=1,level='Stock Info').max()

"""Creating a new empty DataFrame called "returns". This dataframe will contain the returns for each bank's stock:"""

returns=pd.DataFrame()

"""Creating returns value on Close column of each Bank Stocks:"""

for i in tickers:
    returns[i+' Return']= bank_stocks[i]['Close'].pct_change()

"""Checking the head of the returns:"""

returns.head()

"""Checking highest return of 'BAC':"""

bank_stocks['BAC']['Close'].pct_change().max()

"""Creating a pairplot of the returns to see which stock stands out:"""

sns.pairplot(returns[1:])

"""Checking on what dates each bank stock had the best and worst single day returns:

The best single day return:
"""

returns.idxmax()

"""As we can see the best single day return has been on "2020-03-13" for most of the companies.

The worst single day return:
"""

returns.idxmin()

"""And we can also see that the worst single day return has been on "2020-03-16" for most of the companies.

Checking the standard deviation of the returns to see which stock would classify as the riskiest over the entire time period:
"""

returns.std()

"""Very similar risk profiles.

Cheching the riskiest stock for the year '2017':
"""

returns.loc['2017-01-01':'2017-12-31'].std()

"""Creating a distplot of the 2017 returns:"""

sns.distplot(returns.loc['2017-01-01':'2017-12-31'],color='green',bins=100)

"""Creating a distplot of the 2017 returns for CitiGroup:"""

sns.distplot(returns.loc['2017-01-01':'2017-12-31']['C Return'],color='green',bins=100)

"""Creating a distplot of the 2017 returns for Morgan Stanley:"""

sns.distplot(returns.loc['2017-01-01':'2017-12-31']['MS Return'],color='red',bins=100)

"""Creating a line plot that shows Close price for each bank for the entire index of time:"""

for i in tickers:
    bank_stocks[i]['Close'].plot(figsize=(12,4),label=i)
plt.legend()

bank_stocks.xs(key='Close',axis=1,level='Stock Info').plot()

bank_stocks.xs(key='Close',axis=1,level='Stock Info').iplot()

"""Analyzing the moving averages for stocks in the year 2017 by plotting the rolling 30 day average against the Close Price for Morgan Stanley:"""

plt.figure(figsize=(12,6))
MS['Close'].loc['2017-01-01':'2018-01-01'].rolling(window=30).mean().plot(label='30 Day Avg')
MS['Close'].loc['2017-01-01':'2018-01-01'].plot(label='MS CLOSE')
plt.legend()

"""Creating a heatmap of the correlation between the stocks Close Price:"""

sns.heatmap(bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr(),annot=True)

"""Creating a clustermap to cluster the correlations together:"""

sns.clustermap(bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr(),annot=True)

close_corr = bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr()
close_corr.iplot(kind='heatmap',colorscale='rdylbu')

"""Creating a candle plot of Morgan Stanley's stock from Jan 1st 2017 to Jan 1st 2018:"""

MS[['Open', 'High', 'Low', 'Close']].loc['2017-01-01':'2018-01-01'].iplot(kind='candle')

"""Creating a Simple Moving Averages plot of Morgan Stanley for the year 2017:"""

MS['Close'].loc['2017-01-01':'2018-01-01'].ta_plot(study='sma',periods=[15,30,45],title='Simple Moving Averages')

"""Creating a Bollinger Band Plot for Morgan Stanley for the year 2017:"""

MS['Close'].loc['2017-01-01':'2018-01-01'].ta_plot(study='boll')

